name: Build Frontend
on:
  push:
    branches:
      - dev
      - main
    tags:
      - 'r-*'
  pull_request:
    branches:
      - dev
      - main

jobs:
  build:
    name: Build Frontend
    runs-on: ubuntu-latest
    if: ((github.ref == 'refs/heads/dev') || (github.base_ref == 'main') || (github.base_ref == 'dev'))
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      # Checkout the current working code base
      - name: Checkout working branch
        uses: actions/checkout@v4

      # Installs the correct Node version for the project
      - name: Setup Node.js for use with actions
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Build frontend (includes Node package install)
        run: |
          npm ci --include=dev
          npm run build:production

  set-environment:
    name: Set Env
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' && github.actor != 'dependabot[bot]' }}
    outputs:
      environment: ${{ steps.set-environment.outputs.environment }}
      fv_infra_ref: ${{ steps.set-environment.outputs.fv_infra_ref }}

    steps:
      - name: Determine environment and fv-infra ref
        id: set-environment
        shell: bash
        run: |
          REF_NAME="${GITHUB_REF##*/}"
          if [[ "$GITHUB_REF" == "refs/heads/dev" ]]; then
            ENV="dev"
            INFRA_REF="dev"
          elif [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
            ENV="preprod"
            INFRA_REF="main"
          elif [[ "$GITHUB_REF" =~ ^refs/tags/r-.* ]]; then
            ENV="prod"
            # Get latest release tag from fv-infra
            LATEST_TAG=$(git ls-remote --tags https://github.com/First-Peoples-Cultural-Council/fv-infra.git | \
              awk -F/ '/refs\/tags\/r-/ { print $NF }' | sort -Vr | head -n1)
            INFRA_REF="$LATEST_TAG"
          else
            echo "Unknown branch or tag: $GITHUB_REF"
            exit 1
          fi

          echo "Environment: $ENV"
          echo "fv-infra ref: $INFRA_REF"

          echo "environment=$ENV" >> "$GITHUB_OUTPUT"
          echo "fv_infra_ref=$INFRA_REF" >> "$GITHUB_OUTPUT"

      - name: Checkout fv-infra
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.set-environment.outputs.fv_infra_ref }}
          repository: First-Peoples-Cultural-Council/fv-infra
          token: ${{ secrets.PULL_CONFIG_SECRET }}
          path: helm

      - name: Upload Helm charts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: helm
          path: helm


  build_with_tekton:
    name: Dev Build
    environment: dev
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' && github.event_name != 'pull_request' && github.actor != 'dependabot[bot]'
    needs: [build, set-environment]
    steps:
      - uses: actions/checkout@v4
      - name: Monitor Tekton Build
        uses: ./.github/actions/monitor-build
        with:
          aws_region: ${{ secrets.FPCC_DEFAULT_AWS_REGION }}
          aws-access-key-id: ${{ secrets.FPCC_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.FPCC_AWS_SECRET_ACCESS_KEY }}
          cluster_name: ${{ secrets.FV_CLUSTER_NAME }}
          tekton_namespace: ${{ secrets.TEKTON_NAMESPACE }}
          tekton_interceptor_name: ${{ secrets.TEKTON_INTERCEPTOR_NAME }}
          webhook_prefix: "fv-web-webhook-"
          job_sort_order: "head"
          pipeline_step1: ${{ vars.PIPELINE_STEP1 }}
          pipeline_step2: ${{ vars.PIPELINE_STEP2 }}
          pipeline_step3: ${{ vars.PIPELINE_STEP3 }}

  build_with_tekton_preprod:
    name: Preprod Build
    environment: preprod
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request' && github.actor != 'dependabot[bot]'
    needs: [set-environment]
    steps:
      - uses: actions/checkout@v4
      - name: Monitor Tekton Build
        uses: ./.github/actions/monitor-build
        with:
          aws_region: ${{ secrets.FPCC_DEFAULT_AWS_REGION }}
          aws-access-key-id: ${{ secrets.FPCC_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.FPCC_AWS_SECRET_ACCESS_KEY }}
          cluster_name: ${{ secrets.FV_CLUSTER_NAME }}
          tekton_namespace: ${{ secrets.TEKTON_NAMESPACE }}
          tekton_interceptor_name: ${{ secrets.TEKTON_INTERCEPTOR_NAME }}
          webhook_prefix: "fv-web-webhook-"
          job_sort_order: "head"
          pipeline_step1: ${{ vars.PIPELINE_STEP1 }}
          pipeline_step2: ${{ vars.PIPELINE_STEP2 }}
          pipeline_step3: ${{ vars.PIPELINE_STEP3 }}

  build_with_tekton_prod:
    name: Prod Build
    environment: prod
    runs-on: ubuntu-latest
    needs: [set-environment]
    if: github.ref_type == 'tag' && startsWith(github.ref_name, 'r-') && github.event_name != 'pull_request' && github.actor != 'dependabot[bot]'
    steps:
      - uses: actions/checkout@v4
      - name: Monitor Tekton Build
        uses: ./.github/actions/monitor-build
        with:
          aws_region: ${{ secrets.FPCC_DEFAULT_AWS_REGION }}
          aws-access-key-id: ${{ secrets.FPCC_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.FPCC_AWS_SECRET_ACCESS_KEY }}
          cluster_name: ${{ secrets.FV_CLUSTER_NAME }}
          tekton_namespace: ${{ secrets.TEKTON_NAMESPACE }}
          tekton_interceptor_name: ${{ secrets.TEKTON_INTERCEPTOR_NAME }}
          webhook_prefix: "fv-web-webhook-"
          job_sort_order: "head"
          pipeline_step1: ${{ vars.PIPELINE_STEP1 }}
          pipeline_step2: ${{ vars.PIPELINE_STEP2 }}
          pipeline_step3: ${{ vars.PIPELINE_STEP3 }}

  check_helm_chart_diff-dev:
      needs : [build_with_tekton]
      name: Validate Helm Diff - Dev
      runs-on: ubuntu-latest
      if: needs.set-environment.outputs.environment == 'dev'
      environment: dev
      steps:
      -   uses: actions/checkout@v4
      - name: Download Helm charts
        uses: actions/download-artifact@v4
        with:
          name: helm
          path: ./
      -   name: "Prep images and vars"
          uses: ./.github/actions/deploy-prep
          with:
            env: ${{ vars.ENV }}
            image_tag_prefix: ${{ vars.IMAGE_TAG_PREFIX }}
            cluster_name: ${{ secrets.FV_CLUSTER_NAME  }}
            aws_region: ${{  secrets.FPCC_DEFAULT_AWS_REGION  }}
            ecr_uri: ${{ secrets.FPCC_DEFAULT_ECR_URI }}
            aws-secret-access-key:  ${{ secrets.FPCC_AWS_SECRET_ACCESS_KEY }}
            aws-access-key-id: ${{ secrets.FPCC_AWS_ACCESS_KEY_ID }}
      -   name: Check helm-diff
          uses: ./.github/actions/helm-diff
          with:
            env: ${{ vars.ENV }}
            k8_namespace: ${{ secrets.DEPLOYMENT_NAMESPACE }}
            remote_helm_version: ${{ env.REMOTE_HELM_RELEASE_VERSION }}
            helm_chart_name: ${{ secrets.HELM_CHART_NAME  }}

  check_helm_chart_diff-preprod:
      needs : [build_with_tekton_preprod ]
      name: Validate Helm Diff - PreProd
      runs-on: ubuntu-latest
      if: needs.set-environment.outputs.environment == 'preprod'
      environment: preprod
      steps:
      -   uses: actions/checkout@v4
      - name: Download Helm charts
        uses: actions/download-artifact@v4
        with:
          name: helm
          path: ./
      -   name: "Prep images and vars"
          uses: ./.github/actions/deploy-prep
          with:
            env: ${{ vars.ENV }}
            image_tag_prefix: ${{ vars.IMAGE_TAG_PREFIX }}
            cluster_name: ${{ secrets.FV_CLUSTER_NAME  }}
            aws_region: ${{  secrets.FPCC_DEFAULT_AWS_REGION  }}
            ecr_uri: ${{ secrets.FPCC_DEFAULT_ECR_URI }}
            aws-secret-access-key:  ${{ secrets.FPCC_AWS_SECRET_ACCESS_KEY }}
            aws-access-key-id: ${{ secrets.FPCC_AWS_ACCESS_KEY_ID }}
      -   name: Check helm-diff
          uses: ./.github/actions/helm-diff
          with:
            env: ${{ vars.ENV }}
            k8_namespace: ${{ secrets.DEPLOYMENT_NAMESPACE }}
            remote_helm_version: ${{ env.REMOTE_HELM_RELEASE_VERSION }}
            helm_chart_name: ${{ secrets.HELM_CHART_NAME  }}

  check_helm_chart_diff-prod:
      needs : [build_with_tekton_prod]
      name: Validate Helm Diff - Prod
      runs-on: ubuntu-latest
      if: needs.set-environment.outputs.environment == 'prod'
      environment: prod
      steps:
      -   uses: actions/checkout@v4
      - name: Download Helm charts
        uses: actions/download-artifact@v4
        with:
          name: helm
          path: ./
      -   name: "Prep images and vars"
          uses: ./.github/actions/deploy-prep
          with:
            env: ${{ vars.ENV }}
            image_tag_prefix: ${{ vars.IMAGE_TAG_PREFIX }}
            cluster_name: ${{ secrets.FV_CLUSTER_NAME  }}
            aws_region: ${{  secrets.FPCC_DEFAULT_AWS_REGION  }}
            ecr_uri: ${{ secrets.FPCC_DEFAULT_ECR_URI }}
            aws-secret-access-key:  ${{ secrets.FPCC_AWS_SECRET_ACCESS_KEY }}
            aws-access-key-id: ${{ secrets.FPCC_AWS_ACCESS_KEY_ID }}
      -   name: Check helm-diff
          uses: ./.github/actions/helm-diff
          with:
            env: ${{ vars.ENV }}
            k8_namespace: ${{ secrets.DEPLOYMENT_NAMESPACE }}
            remote_helm_version: ${{ env.REMOTE_HELM_RELEASE_VERSION }}
            helm_chart_name: ${{ secrets.HELM_CHART_NAME  }}

  helm_upgrade-dev:
      name: Deploy - Dev
      runs-on: ubuntu-latest
      needs : [check_helm_chart_diff-dev]
      if: needs.set-environment.outputs.environment == 'dev'
      environment: dev
      steps:
      - uses: actions/checkout@v4
      - name: Download Helm charts
        uses: actions/download-artifact@v4
        with:
          name: helm
          path: ./
      - name: Download Helm values file
        uses: actions/download-artifact@v4
        with:
          name: helm-values
          path: ./downloads
      - name: "Deploy to Dev"
        uses: ./.github/actions/deploy
        with:
          cluster_name: ${{ secrets.FV_CLUSTER_NAME  }}
          k8_namespace: ${{  secrets.DEPLOYMENT_NAMESPACE  }}
          aws_region: ${{ secrets.FPCC_DEFAULT_AWS_REGION }}
          aws_account: ${{ secrets.FPCC_DEFAULT_CLOUD_ACCOUNT }}
          aws-secret-access-key:  ${{ secrets.FPCC_AWS_SECRET_ACCESS_KEY }}
          aws-access-key-id: ${{ secrets.FPCC_AWS_ACCESS_KEY_ID }}
          env: ${{  vars.ENV  }}
          helm_chart_name: ${{ secrets.HELM_CHART_NAME }}

  helm_upgrade-prod:
      name: Deploy - Prod
      runs-on: ubuntu-latest
      needs : [check_helm_chart_diff-prod]
      if: needs.set-environment.outputs.environment == 'prod'
      environment: prod
      steps:
      -   uses: actions/checkout@v4
      - name: Download Helm charts
        uses: actions/download-artifact@v4
        with:
          name: helm
          path: ./
      - name: Download Helm values file
        uses: actions/download-artifact@v4
        with:
          name: helm-values
          path: ./downloads
      - name: "Deploy to Prod"
        uses: ./.github/actions/deploy
        with:
          cluster_name: ${{ secrets.FV_CLUSTER_NAME  }}
          k8_namespace: ${{  secrets.DEPLOYMENT_NAMESPACE  }}
          aws_region: ${{ secrets.FPCC_DEFAULT_AWS_REGION }}
          aws_account: ${{ secrets.FPCC_DEFAULT_CLOUD_ACCOUNT }}
          aws-secret-access-key:  ${{ secrets.FPCC_AWS_SECRET_ACCESS_KEY }}
          aws-access-key-id: ${{ secrets.FPCC_AWS_ACCESS_KEY_ID }}
          env: ${{  vars.ENV  }}
          helm_chart_name: ${{ secrets.HELM_CHART_NAME }}

  helm_upgrade-preprod:
      name: Deploy - Preprod
      runs-on: ubuntu-latest
      needs : [check_helm_chart_diff-preprod]
      if: needs.set-environment.outputs.environment == 'preprod'
      environment: preprod
      steps:
      -   uses: actions/checkout@v4
      - name: Download Helm charts
        uses: actions/download-artifact@v4
        with:
          name: helm
          path: ./
      - name: Download Helm values file
        uses: actions/download-artifact@v4
        with:
          name: helm-values
          path: ./downloads
      - name: "Deploy to Preprod"
        uses: ./.github/actions/deploy
        with:
          cluster_name: ${{ secrets.FV_CLUSTER_NAME  }}
          k8_namespace: ${{  secrets.DEPLOYMENT_NAMESPACE  }}
          aws_region: ${{ secrets.FPCC_DEFAULT_AWS_REGION }}
          aws_account: ${{ secrets.FPCC_DEFAULT_CLOUD_ACCOUNT }}
          aws-secret-access-key:  ${{ secrets.FPCC_AWS_SECRET_ACCESS_KEY }}
          aws-access-key-id: ${{ secrets.FPCC_AWS_ACCESS_KEY_ID }}
          env: ${{  vars.ENV  }}
          helm_chart_name: ${{ secrets.HELM_CHART_NAME }}

  image_scan:
    name: ECR Scan
    environment: dev
    runs-on: ubuntu-22.04
    needs: helm_upgrade-dev
    if: ((github.ref == 'refs/heads/dev') && (github.event_name != 'pull_request'))
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.FPCC_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.FPCC_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{  secrets.FPCC_DEFAULT_AWS_REGION  }}
      - name: "Run image scan"
        run: |
          aws ecr start-image-scan --repository-name ${{ secrets.ECR_REPO_NAME }} --image-id imageTag=build-${{ github.head_ref }}${{ github.sha }}
          aws ecr wait image-scan-complete --repository-name ${{ secrets.ECR_REPO_NAME }} --image-id imageTag=build-${{ github.head_ref }}${{ github.sha }}
          echo "List of findings are below"
          aws ecr describe-image-scan-findings --image-id imageTag=build-${{ github.head_ref }}${{ github.sha }} --repository-name ${{ secrets.ECR_REPO_NAME }} | jq .imageScanFindings.findings
          aws ecr describe-image-scan-findings --image-id imageTag=build-${{ github.head_ref }}${{ github.sha }} --repository-name ${{ secrets.ECR_REPO_NAME }} | if [[ $(grep  '\"severity\": \"CRITICAL\"') ]]; then echo "CRTICAL Vulnerabilities present in this deployment"; exit 1; fi
          aws ecr describe-image-scan-findings --image-id imageTag=build-${{ github.head_ref }}${{ github.sha }} --repository-name ${{ secrets.ECR_REPO_NAME }} | if [[ $(grep  '\"severity\": \"HIGH\"') ]]; then echo "HIGH Vulnerabilities present in this deployment"; exit 1; fi


  trivy_scan-dev:
    name: Trivy Scan
    runs-on: ubuntu-latest
    needs: [ helm_upgrade-dev ]
    if: needs.set-environment.outputs.environment == 'dev'
    environment: dev
    steps:
      - uses: actions/checkout@v4

      - name: Download Helm values file
        uses: actions/download-artifact@v4
        with:
          name: helm-values
          path: ./downloads

      - name: Scan Images
        uses: ./.github/actions/scan
        with:
          env: ${{ vars.ENV }}
          aws_region: ${{ secrets.FPCC_DEFAULT_AWS_REGION }}
          aws_account: ${{ secrets.FPCC_DEFAULT_CLOUD_ACCOUNT }}
          aws-access-key-id: ${{ secrets.FPCC_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.FPCC_AWS_SECRET_ACCESS_KEY }}
          ecr_repo_name: "fv-web"

